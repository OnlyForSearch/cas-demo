<PUBLIC:COMPONENT TAGNAME="tree"> 
	<PUBLIC:PROPERTY NAME="type" put="setType" get="getType"/>
	<PUBLIC:PROPERTY NAME="xmlDom" put="setXmlDom" get="getXmlDom"/>
	<PUBLIC:PROPERTY NAME="xmlUrl" put="setXmlUrl" get="getXmlUrl"/>
	<PUBLIC:PROPERTY NAME="sendParams"/>
	<PUBLIC:PROPERTY NAME="value" put="setValue" get="getValue"/>
	<PUBLIC:PROPERTY NAME="text" put="setText" get="getText"/>
	<PUBLIC:PROPERTY NAME="width" put="setWidth" get="getWidth"/>
	<PUBLIC:PROPERTY NAME="isCheckBox" put="setIsCheckBox" get="getIsCheckBox"/>
	<PUBLIC:PROPERTY NAME="filter"/>
	<PUBLIC:PROPERTY NAME="isClearText"/>
	<PUBLIC:PROPERTY NAME="isTextClearRoot"/>
	<PUBLIC:PROPERTY NAME="isTextShowLay" />
	<PUBLIC:PROPERTY NAME="treeHeight" VALUE="200"/>
	<PUBLIC:PROPERTY NAME="showDepth" put="setShowDepth" get="getShowDepth"/>
	<PUBLIC:PROPERTY NAME="defaultIco" put="setDefaultIco" get="getDefaultIco"/>
	<PUBLIC:PROPERTY NAME="defaultParentIco" put="setDefaultParentIco" get="getDefaultParentIco"/>
	<PUBLIC:PROPERTY NAME="sortAtt" put="setSortAtt" get="getSortAtt"/>
	<PUBLIC:PROPERTY NAME="searchAtt" put="setSearchAtt" get="getSearchAtt"/>
	<PUBLIC:PROPERTY NAME="search" put="setSearch" get="getSearch"/>
	<PUBLIC:PROPERTY NAME="isShowChildInSearch" put="setIsShowChildInSearch" get="getIsShowChildInSearch"/>
	<PUBLIC:PROPERTY NAME="readOnly" put="setReadOnly" get="getReadOnly"/>
	<PUBLIC:PROPERTY NAME="allowClear" put="setAllowClear" get="getAllowClear"/>
	<PUBLIC:PROPERTY NAME="showFullPath"/>
	<PUBLIC:PROPERTY NAME="separator"/>
	<PUBLIC:PROPERTY NAME="popWin" get="getPopWin"/>	
	<PUBLIC:PROPERTY NAME="isSelectChildNode" set="setIsSelectChildNode" get="getIsSelectChildNode"/>
	<PUBLIC:PROPERTY NAME="isShowUnDisplay" set="setIsShowUnDisplay" get="getIsShowUnDisplaye"/>
    <PUBLIC:PROPERTY NAME="filterParentXpath" put="setFilterParentXpath"/>
	<PUBLIC:METHOD NAME="getAttribute"/>
    <PUBLIC:METHOD NAME="setAttribute"/>
	<PUBLIC:METHOD NAME="itemClick"/>
    <PUBLIC:METHOD NAME="itemOver"/>
    <PUBLIC:METHOD NAME="itemOut"/>
    <PUBLIC:METHOD NAME="parentNodeClick"/>
    <PUBLIC:METHOD NAME="delElement"/>
    <PUBLIC:METHOD NAME="showTree"/>
    <PUBLIC:METHOD NAME="checkBoxClickEvent"/>
    <PUBLIC:METHOD NAME="clearCheckBox"/>
    <PUBLIC:EVENT NAME="onProcess" ID="pcID"/>
    <PUBLIC:EVENT NAME="onResultChange" ID="rcID"/>
	<PUBLIC:ATTACH EVENT="oncontentready" ONEVENT="init()" />
</PUBLIC:COMPONENT>

<SCRIPT LANGUAGE="JScript">
//定义默认语言资源
var treeHtcDefaultLang = {
	waitText : '数据载入中...',
	oClearBtnInnerHTML : '[&nbsp;清空&nbsp;]'
};
//获取语言资源
function getTreeHtcLan(code)
{
	if(typeof(ItmLang) == 'undefined' || typeof(ItmLang.widgets) == 'undefined')
	{
		return eval('treeHtcDefaultLang.' + code);
	}
	else
	{
		 return eval('ItmLang.widgets.treeHtc.' + code);
	}
}

var SELECTED_BACKGROUND = '#808080';
var SELECTED_BORDER = '1px solid #3F3F3F';
var SELECTED_COLOR = 'white';
var MAX_DEPTH = 100;
var CLICK_SHOW = 0
var SEARCH_SHOW = 1
//属性变量
var oXmlDom;
var sXmlUrl;
var sValue = "";
var sText = "";
var sType = "";
var iWidth = 160;
var isReParentText = false;
var isCheckBox = false;
var iShowDepth = 2;
var sDefaultIco = 'treeItem.gif';
var sDefaultParentIco = 'treeItem.gif';
var sSortAtt;
var sSearchAtt = "label";
var isShowChild = false;
var isReadOnly = false;
var isSearch = true;

var xslUrl = "../xsl/XMLTree.xsl";
var typeXmlUrl = "../xml/TreeType.xml";
var icoUrl = "../image/ico/";
var lineUrl = "../image/line/";
var topLine = new Array('rminus.gif','rplus.gif','r.gif');
var bottomLine = new Array('lminus.gif','lplus.gif','l.gif');
var otherLine = new Array('tminus.gif','tplus.gif','t.gif');
var backgroundLine = 'i.gif';
var waitIco = 'spinner.gif';
var waitText = getTreeHtcLan('waitText');
var oTypesDoc;
var transXslDoc;
var loadChildXslDoc;
var oInput;
var oBtn;
var oPopup;
var oTreeDiv;
var oClearBtn;
var oSelectedItem;
var oOverItem;
var oSelectedNode
var lastTimeId;
var lastShowType = SEARCH_SHOW;
var isFireSearch = true;
var isInit = false;
var isAllowClear = true;
var result = new Array();
var delement; 
var isSelectChildNode = false;
var isShowUnDisplay = false;

var strFilterParentXpath;
var isReInit = 0;

function init()
{
	with(element.style)
	{
		whiteSpace = 'nowrap';
		border = '0px solid #ABABAB';
		cursor = 'default';
		height = 20;
		width = iWidth;
	}
	var oInputId = window.document.uniqueID;
	var oBtnId = window.document.uniqueID;
	var outHTML = '<table border="0" cellPadding="0" CELLSPACING="0" height="100%" width="160px;">'
				+	'<tr>'
				+		'<td style="border-right:0px solid #ABABAB;">'
				+			'<input onkeyup="checkLength(this)" type="text" id="'+oInputId+'" autocomplete="off" style="background-color:transparent;border:0px;font-size:9pt;height:100%;" value="'+element.text+'">'
				
				+			'<button id="'+oBtnId+'" style=">'
				+				'width:16px;'
				+				'font-family:webdings;'
				+				'font-size:9pt;'
				+				'height:100%;'
				+				'border:0px;'
				+			'" HIDEFOCUS="true">6</button>'
				+		'</td>'
				+	'</tr>'
				+ '</table>';

	element.innerHTML = outHTML;
	
	oInput = window.document.getElementById(oInputId);
	oBtn = window.document.getElementById(oBtnId);
	if(readOnly)
	{
		oInput.readOnly = readOnly;
		oBtn.disabled = readOnly;
	}
	else
	{
		oInput.readOnly = !isSearch;
	}
	if(!oInput.readOnly)
	{
		oInput.attachEvent("onpropertychange",inputKeyDown);
	}
	oBtn.attachEvent("onclick",showTree);
	setXslDoc();
	isInit = true;

}



function setXslDoc()
{
	xslUrl = getRealPath(xslUrl);
	icoUrl = getRealPath(icoUrl);
	lineUrl = getRealPath(lineUrl);
	
	transXslDoc = new ActiveXObject("Microsoft.XMLDOM");
	transXslDoc.async = false;
    transXslDoc.load(xslUrl);
	var handle = 'parent.'+uniqueID+'.';
	setXslAttribute('IcoUrl',icoUrl,transXslDoc);
    setXslAttribute('LineUrl',lineUrl,transXslDoc);
    setXslAttributeArray('topLine',transXslDoc);
    setXslAttributeArray('bottomLine',transXslDoc);
    setXslAttributeArray('otherLine',transXslDoc);
    setXslAttribute('backgroundLine',backgroundLine,transXslDoc);
    setXslAttribute('isShowUnDisplay',this.isShowUnDisplay,transXslDoc);
    setXslAttribute('isDynamicLoad',null,transXslDoc);
    setXslAttribute('defaultIco',defaultIco,transXslDoc);
    setXslAttribute('defaultParentIco',defaultParentIco,transXslDoc);
    setXslAttribute('hasChildAttName',null,transXslDoc);
    setXslAttribute('sortAtt',sortAtt,transXslDoc);
    setXslAttribute('showType',null,transXslDoc);
    setXslAttribute('parentNodeClickEvent',handle+"parentNodeClick(event)",transXslDoc);
    setXslAttribute('itemOverEvent',handle+"itemOver(event)",transXslDoc);
    setXslAttribute('itemOutEvent',"",transXslDoc);
    setXslAttribute('itemClickEvent',handle+"itemClick(event)",transXslDoc);
    setXslAttribute('itemDblClickEvent',"",transXslDoc);
    setXslAttribute('startDragEvent',"",transXslDoc);
    setXslAttribute('dragEvent',"",transXslDoc);
    setXslAttribute('endDragEvent',"",transXslDoc);
    setXslAttribute('rightClickEvent',"",transXslDoc);
    if(getIsCheckBox())
    {
      setXslAttribute('checkBoxClickEvent',handle+"checkBoxClickEvent(event)",transXslDoc);
      setXslAttribute('showType',"checkbox",transXslDoc);
    }
    else
    {
        setXslAttribute('checkBoxClickEvent',"",transXslDoc);
    }
    
    loadChildXslDoc = new ActiveXObject("Microsoft.XMLDOM");
    loadChildXslDoc.async = false;
    loadChildXslDoc.load(transXslDoc);
    setXslAttribute('transformType',2,loadChildXslDoc);
	setXslAttribute('showDepth',1,loadChildXslDoc);
	setXslAttribute('isShowLineInOnlyNode',true,loadChildXslDoc);
}

function setXmlDom(_xmlDom)
{
	if(_xmlDom)
	{
		oXmlDom = new ActiveXObject("Microsoft.XMLDOM");
		oXmlDom.async = false;
		oXmlDom.load(_xmlDom);
		oXmlDom.setProperty("SelectionLanguage", "XPath");
		var oXmlRoot = oXmlDom.selectSingleNode('/root/Menu');
		if(oXmlRoot)
		{
			var oAttList = oXmlRoot.attributes;
			for(var i=0;i<oAttList.length;i++)
			{
				eval(oAttList[i].name+'="'+oAttList[i].value+'";');
			}
		}
		oEvent = createEventObject();
		oEvent.xmlDom = oXmlDom;
		pcID.fire(oEvent);
	}
}

function getXmlDom()
{
	return oXmlDom;
}

function setXmlUrl(_xmlUrl)
{
	if(_xmlUrl)
	{
		lastShowType = SEARCH_SHOW;
		oSelectedNode = null;
		sXmlUrl = _xmlUrl;
		var xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
		xmlhttp.Open("POST",sXmlUrl,false);
		xmlhttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");
		xmlhttp.send(sendParams);
		if(isSuccess(xmlhttp))
		{
			xmlDom = xmlhttp.responseXML;
		}
		xmlhttp.abort();
	}
}

function getXmlUrl()
{
	return sXmlUrl;
}

function setType(_type)
{
	sType = _type;
	if(oTypesDoc==null)
	{
		oTypesDoc = new ActiveXObject("Microsoft.XMLDOM");
		oTypesDoc.async = false;
		oTypesDoc.load(getRealPath(typeXmlUrl));
	}
	var oTypeNode = oTypesDoc.selectSingleNode("/types/type[@name='"+sType+"']");
	if(oTypeNode)
	{
		for(var i=0;i<oTypeNode.childNodes.length;i++)
		{
			with(oTypeNode.childNodes[i])
			{
				eval(tagName+'="'+text+'";');
			}
		}
	}
}

function getType()
{
	return sType;
}

function setValue(_value)
{
	var tmpValue = sValue;
	clearCheckBox();
	_setValue(_value);
	oSelectedItem = null;
	if(isInit && tmpValue != sValue)
	{
		oEvent = createEventObject();
		oEvent.selectedValue = element.value;
		oEvent.selectedText = element.text;
		oEvent.isChange = true;
		oEvent.type = 0;
		rcID.fire(oEvent);
	}
}

function _setValue(_value)
{
    sValue = _value;
    var tmp = "";
    var texttmp = "";
    if(sValue != null && typeof(sValue) != "undefined")
    {
        sValue = sValue.toString();
        for(var i=0; i < sValue.split(',').length ; i ++)
        { 
	        tmp  = sValue.split(',')[i];
	        if(xmlDom)
            {
	            oSelectedNode = null;
	            if(sValue)
	            {
		            oSelectedNode = xmlDom.selectSingleNode("//MenuItem[@id='"+tmp+"']");
	            }
            }
            if (element.isTextShowLay == 'true' || element.isTextShowLay == true) {
            
                if (oSelectedNode) {
                    var oRepeatNode = oSelectedNode;
                    var pleg = oRepeatNode.getAttribute('TYPE_LEVEL');
                    if (pleg == null) pleg = oRepeatNode.getAttribute('LEVEL');
                   
                    var pathText = oRepeatNode.getAttribute('label');
                    var p = 1;
                    if (isTextClearRoot == 'true' || isTextClearRoot == true) {
                        p = 2;
                    }
                    while (p < pleg) {
                        oRepeatNode = oRepeatNode.parentNode;
                        pathText = oRepeatNode.getAttribute('label') + "-" + pathText;
                        p++;
                    }
                    text = pathText;
                }
                else {
                    text = "";
                }      
                     
            }
            else {
                if(sValue.split(',').length>1)
                {
                    texttmp +=( (oSelectedNode) ? oSelectedNode.getAttribute("label") : "")+",";
                }
                else
                {
                    text = (oSelectedNode) ? oSelectedNode.getAttribute("label") : "";
                }
                if(oSelectedNode)
                {
        	        if(showFullPath == 'true' || showFullPath == true)
        	        {
        		        var opNode = oSelectedNode;        		
        		        var textArr = new Array();
        		        while(opNode.nodeName != 'Menu')
        		        {
        			        if(opNode.parentNode.nodeName != 'Menu')
        			        {
        				        textArr.push(opNode.getAttribute("label"));
        				        opNode = opNode.parentNode;	
        			        }
        			        else
        			        {
        				        break;
        			        }        			
        		        }
        		        textArr.reverse();
        		        text = (separator)? textArr.join(separator) : textArr.join("->");
                    
    		        }
    	        }
            }
        
        }  
        if(sValue.split(',').length>1)
	    {
	        text = texttmp.substring(0,texttmp.length-1);
	    }
    }
    else
    {
        text = "";
    }

}

function getValue()
{
	if(sValue == "" && element.isClearText!=='false' && element.isClearText!==false)
	{
		text = "";
	}
	return sValue;
}

function setText(_text)
{
	sText = _text;
	if(oInput)
	{
		isFireSearch = false;
		oInput.value = sText;
		isFireSearch = true;
	}
}

function getText()
{
	if(value == "" && element.isClearText!=='false' && element.isClearText!==false)
	{
		text = "";
	}
	return sText;
}

function setWidth(_width)
{
	iWidth = _width;
	element.style.width = _width;
}

function getWidth()
{
	return iWidth;
}

function setIsCheckBox(_isCheckBox)
{
    isCheckBox = setBooleanAtt(_isCheckBox);
}

function getIsCheckBox()
{
    return isCheckBox;
}

function setInputInputEvent()
{
	if(oInput.readOnly)
	{
		oInput.detachEvent("onpropertychange",inputKeyDown);
	}
	else
	{
		oInput.attachEvent("onpropertychange",inputKeyDown);
	}
}

function setReadOnly(_readOnly)
{
	isReadOnly = setBooleanAtt(_readOnly);
	if(oInput!=null)
	{
		oBtn.disabled = isReadOnly;
		if(isSearch)
		{
			oInput.readOnly = isReadOnly;
			setInputInputEvent();
		}
	}
}

function getReadOnly()
{
	return isReadOnly;
}

function setAllowClear(_boolean)
{
	isAllowClear = setBooleanAtt(_boolean);
	if(oClearBtn)
	{
		oClearBtn.disabled = !isAllowClear;
	}
}

function getAllowClear()
{
	return isAllowClear;
}

function setShowDepth(_showDepth)
{
	iShowDepth = _showDepth;
	if(transXslDoc!=null)
	{
		setXslAttribute('showDepth',iShowDepth,transXslDoc);
	}
}

function getShowDepth()
{
	return iShowDepth;
}

function setDefaultIco(_defaultIco)
{
	sDefaultIco = _defaultIco;
	if(transXslDoc!=null)
	{
		setXslAttribute('defaultIco',sDefaultIco,transXslDoc);
	}
}

function getDefaultIco()
{
	return sDefaultIco;
}

function setDefaultParentIco(_defaultParentIco)
{
	sDefaultParentIco = _defaultParentIco;
	if(transXslDoc!=null)
	{
		setXslAttribute('defaultParentIco',sDefaultParentIco,transXslDoc);
	}
}

function getDefaultParentIco()
{
	return sDefaultParentIco;
}

function setSortAtt(_sortAtt)
{
	sSortAtt = _sortAtt;
	if(transXslDoc!=null)
	{
		setXslAttribute('sortAtt',sSortAtt,transXslDoc);
	}
}

function getSortAtt()
{
	return sSortAtt;
}

function setSearchAtt(_searchAtt)
{
	sSearchAtt = _searchAtt;
}

function getSearchAtt()
{
	return sSearchAtt;
}

function setSearch(_isSearch)
{
	isSearch = setBooleanAtt(_isSearch);
	if(oInput!=null && !isReadOnly)
	{
		oInput.readOnly = !isSearch;
		setInputInputEvent();
	}
}

function getSearch()
{
	return isSearch;
}

function setIsShowChildInSearch(_isShow)
{
	isShowChild = setBooleanAtt(_isShow);
}

function getIsShowChildInSearch()
{
	return isShowChild;
}

function delElement(attName,attValue)
{
	if(xmlDom)
	{
		var oNodeList = xmlDom.selectNodes('//MenuItem[@'+attName+'="'+attValue+'"]')
		if(oNodeList!=null)
		{
			oNodeList.removeAll();
		}
	}
}

function showTree(showType,showElement)
{
	//创建下拉窗口对象,只创建一次
	if(oPopup==null)
	{
		oPopup = window.createPopup();
		var oPopupBody = oPopup.document.body;
		oPopupBody.attachEvent("oncontextmenu",cancel);
		oPopupBody.attachEvent("onselectstart",cancel);
		oPopupBody.attachEvent("ondrag",cancel);
		oPopupBody.style.border = '1px solid black';
		var oDiv = oPopup.document.createElement("div");
		with(oDiv.style)
		{
			width = '100%';
			height= '100%';
			paddingBottom = '19';
			overflow = 'hidden';
		}
		oPopupBody.appendChild(oDiv);
		
		oTreeDiv = oPopup.document.createElement("div");
		with(oTreeDiv.style)
		{
			width	= '100%';
			height	= '100%';
			padding = '3px 2px 2px 3px';
			overflow= 'auto';
			scrollbar3dLightColor = '#ABABAB';
			scrollbarHighlightColor = '#FFFFFF';
			scrollbarFaceColor =  '#E6E4DF';
			scrollbarShadowColor = '#FFFFFF';
			scrollbarDarkShadowColor = '#ABABAB';
			scrollbarTrackColor = '#F1F1F6';
			background = '#F7FAFD';
		}
		oDiv.appendChild(oTreeDiv);
		
		var oClearDiv = oPopup.document.createElement("div");
		oClearBtn = oPopup.document.createElement("span");
		
		oClearDiv.appendChild(oClearBtn);
		
		with(oClearDiv.style)
		{
			position = 'absolute';
			left = 0;
			bottom = 0;
			height = 19;
			width = '100%';
			textAlign = 'right';
			padding = '4 5 0 0';
			overflow = 'hidden';
			fontSize = '9 pt';
			color = '#284997';
			background = '#D5EAFF';
			zIndex = 99;
		}
		oClearBtn.innerHTML = getTreeHtcLan('oClearBtnInnerHTML');
		oClearBtn.style.cursor = 'hand';
		oClearBtn.onclick = function ()
		{
			if(element.allowClear)
			{
				element.value = '';
				oPopup.hide();
			}
		}
		oClearBtn.disabled = !isAllowClear;
		oDiv.appendChild(oClearDiv);
	}
	//单点击的时候重绘下拉框,查询的时候就不重绘了
	if(!oPopup.isOpen)
	{
		showElement = showElement || element;
		//treeLeft = element.getBoundingClientRect().left + getWinScreenLeft(window);
		//treeTop = element.getBoundingClientRect().top +element.offsetHeight+getWinScreenTop(window);
		//treeWidth = element.offsetWidth;
		//oPopup.show(treeLeft,treeTop,treeWidth,treeHeight);
		var treeLeft = 0;
		var treeTop = showElement.offsetHeight;
		var treeWidth = showElement.offsetWidth;
		oPopup.show(treeLeft,treeTop,treeWidth,treeHeight,showElement);
		
	}
	//存在XML对象
	if(xmlDom)
	{
		if(showType == SEARCH_SHOW)
		{
			oSelectedNode = null;
			oSelectedItem = null;
			sValue = "";
			oTreeDiv.innerHTML = getTransformXML().transformNode(transXslDoc);
		}
		else
		{
			if(lastShowType == SEARCH_SHOW || oSelectedNode==null)
			{
				oOverItem = null;
				oTreeDiv.innerHTML = getInitXmlDom().transformNode(transXslDoc);
				if(oSelectedNode)
				{
					oSelectedItem = clickNode(oSelectedNode);
				}
                else
                {
                    oSelectedItem = null;
                }
			}
		}
		lastShowType = showType;
		if(oSelectedItem)
		{
		    if(!getIsCheckBox())
		    {
                oSelectedItem.fireEvent("onmouseover");
			    oSelectedItem.scrollIntoView();
		    }
		}
		else
		{
			itemOut(oOverItem);
		}
	}

	showElement = showElement || element;
	delement = showElement;
	changeoPopupWidth(showElement);
}

function getItemFormNode(oNode)
{
	var oItem = null;
	if(oNode)
	{
		oItem = oPopup.document.getElementById(oNode.getAttribute("id"));
	}
	return oItem;
}

//将指定节点的父节点全部打开
function clickNode(oNode)
{
	var parentNodeIds = new Array();
	var oParentSelectedNode;
	var oParentSelectedItem;
	oParentSelectedNode = oNode;
	while(oParentSelectedNode && oParentSelectedNode.tagName != "Menu")
	{
		parentNodeIds.push(oParentSelectedNode);
		oParentSelectedNode=oParentSelectedNode.parentNode;
	}
	for(var i=parentNodeIds.length-1;i>0;i--)
	{
		oParentSelectedItem = getItemFormNode(parentNodeIds[i]);
		if(oParentSelectedItem && isClosed(oParentSelectedItem))
		{
			oParentSelectedItem.parentElement.firstChild.click();
		}
	}
	return getItemFormNode(parentNodeIds[i]);
}

function filterShowXML(oShowDoc)
{
	if(filter)
	{
		var filterNodes = oShowDoc.selectNodes("//MenuItem[@tag='"+filter+"']");
		if(filterNodes)
		{
			filterNodes.removeAll();
		}
	}
	return oShowDoc;
}

function filterShowXMLByXpath(oShowDoc)
{
    if(strFilterParentXpath)
    {
        //xpath demo = /root/Menu/MenuItem[@id!=2002]
        var filterNodes = oShowDoc.selectNodes(strFilterParentXpath);
        if(filterNodes)
        {
            filterNodes.removeAll();
            //this.setXmlUrl(sXmlUrl); //重置数据源
        }
    }
    return oShowDoc;
}

//获取搜索后的XML
function getTransformXML()
{
	var showXML;
	if(oInput.value != "")
	{
		setXslAttribute('showDepth',MAX_DEPTH,transXslDoc);
		showXML = createShowXML();
		var menuRootNode = xmlDom.selectSingleNode("/root/Menu");
		if(menuRootNode != null)
	   	{
	   		AddToShowXML(searchTreeXML(menuRootNode.childNodes),showXML.selectSingleNode("/root/Menu"));
	   	}
	   	showXML = filterShowXML(showXML);
        showXML = filterShowXMLByXpath(showXML);
	}
	else
	{
		showXML = getInitXmlDom();
	}
	return showXML;
}

function getInitXmlDom()
{
	setXslAttribute('showDepth',showDepth,transXslDoc);
    //return filterShowXML(xmlDom);
    var tempDom = filterShowXML(xmlDom);
    return filterShowXMLByXpath(tempDom);

}

function inputKeyDown()
{
	if(isFireSearch && event.propertyName == "value")
	{
		if(lastTimeId != null)
		{
			window.clearTimeout(lastTimeId);
		}
		lastTimeId = window.setTimeout(uniqueID+".showTree("+SEARCH_SHOW+")",100);
	}
}

//在指定节点集合中搜索
function searchTreeXML(oSearchNodeChilds)
{
	var i;
	var results;
	var _isSeach,_isFind,isCloneChild,isFind=false;
	var addNodes = new Array();
	var oCloneNode;
	for(i=0;i<oSearchNodeChilds.length;i++)
	{
		with(oSearchNodeChilds[i])
		{
			results = searchTreeXML(childNodes);
			_isSeach = (getAttribute(searchAtt).toLowerCase().indexOf(oInput.value.toLowerCase())!= -1);
			_isFind = (results[0] || _isSeach);
			if(_isFind && !isFind)
			{
				isFind = _isFind;
			}
			if(_isFind)
			{
				isCloneChild = (_isSeach && isShowChildInSearch);
				oCloneNode = cloneNode(isCloneChild);			
				if(_isSeach)
				{
					oCloneNode.setAttribute("style","font-weight:bold");
				}
				addNodes.push(oCloneNode);
			}
			AddToShowXML(results,oCloneNode,isCloneChild);
		}
	}
	return new Array(isFind,addNodes);
}

function AddToShowXML(results,oParentNode,isCloneChild)
{
	var i,oRepeatNode;
	if(results[0])
	{
		for(i=0;i<results[1].length;i++)
		{
			if(isCloneChild)
			{
				oRepeatNode = oParentNode.selectSingleNode("MenuItem[@id='"+results[1][i].getAttribute("id")+"']");
				if(oRepeatNode)
				{
					oParentNode.removeChild(oRepeatNode);
				}
			}
			oParentNode.appendChild(results[1][i]);
		}
	}
}

function getAttribute(name)
{
	var attValue = "";
	if(oSelectedItem)
	{
		attValue = oSelectedItem.getAttribute(name);;
	}
	if(oSelectedNode && attValue==null)
	{
		attValue = oSelectedNode.getAttribute(name);
	}
	return attValue;
}

function setAttribute(name,value)
{
	if(oSelectedItem)
	{
		oSelectedItem.setAttribute(name,value);
	}
}

function itemClick(oEvent)
{
    if(!getIsCheckBox())
    {
	    var isChange = true;
	    var tmpSelectedItem = oSelectedItem;
	    oSelectedItem = oEvent.srcElement;
	    if(sValue!=oSelectedItem.id)
	    {
		    oEvent = createEventObject();
		    oEvent.selectedValue = oSelectedItem.id;
		    oEvent.selectedText = oSelectedItem.innerText;
		    oEvent.type = 1;
		    _setValue(oSelectedItem.id);
		    oEvent.isChange = true;
		    rcID.fire(oEvent);
		    isChange = oEvent.isChange;
	    }
	    if(!isChange)
	    {
		    oSelectedItem = tmpSelectedItem;
		    if(oSelectedItem)
		    {
			    _setValue(oSelectedItem.id);
		    }
		    else
		    {
			    _setValue("");
		    }
	    }
	    oPopup.hide();
	}
    else
    {
        checkBoxLabelClick(oEvent);
    }
}

function itemOver(oEvent)
{
	if(oOverItem != oEvent.srcElement)
	{
		itemOut(oOverItem);
		oOverItem = oEvent.srcElement;
		oOverItem.runtimeStyle.backgroundColor = SELECTED_BACKGROUND;
	    oOverItem.runtimeStyle.color = SELECTED_COLOR;
	    oOverItem.runtimeStyle.border = SELECTED_BORDER;
    }
}

function itemOut(oItem)
{
	if(oItem)
	{
		oItem.runtimeStyle.backgroundColor = '';
	    oItem.runtimeStyle.color = '';
	    oItem.runtimeStyle.border = '';
	    oItem = null;
    }
}
//------边框大小自动改变、复选框、返回父节点名称功能------begin------------------

function checkBoxClickEvent(oEvent)
{
    var chk = getObj(oEvent.srcElement,0);
    checkChildNodes(chk);
    checkBoxReturn(oEvent);
}

function checkBoxLabelClick(oEvent)
{
    try
    {
        var chk = getObj(oEvent.srcElement,0);
        if(chk.checked)
        {
            chk.checked = false; 
        }
        else
        {
            chk.checked = true; 
        }
        checkChildNodes(chk);
    }
    catch(e){}
    checkBoxReturn(oEvent);
}

function checkBoxReturn(oEvent)
{
	var isFire = 0;
	if(oEvent && oEvent.isFire)
	{
		isFire = oEvent.isFire;
	}
	
    if(oTreeDiv != null && oTreeDiv!= undefined)
    {
        var txtarray = new Array();
        var valuearray = new Array();
        var txttmp  = "";
        var valuetmp = "";
        var allchk = oTreeDiv.document.getElementsByName('MYCHK');
        for (var i = 0; i < allchk.length; i++) 
        {
            if (allchk[i].type == "checkbox" && allchk[i].checked) 
            {
                txtarray.push(getObj(allchk[i],1).outerText);
                valuearray.push(getObj(allchk[i],1).id);
            }
        }
        txttmp = txtarray.join(',');
        valuetmp = valuearray.join(',');
        
       	var isChange = true;
	    var tmpSelectedItem = oSelectedItem;
	    oSelectedItem = oEvent.srcElement;
	     if(sValue!=valuetmp)
	    {
		    oEvent = createEventObject();
		    oEvent.selectedValue = valuetmp;
		    oEvent.selectedText = txttmp;
            element.text = txttmp;
		    oEvent.type = 1;
		    _setValue(valuetmp);
		    oEvent.isChange = true;
		    if(isFire==0)
		    	rcID.fire(oEvent);
		    isChange = oEvent.isChange;
	    }
	    if(!isChange)
	    {
		    oSelectedItem = tmpSelectedItem;
		    if(oSelectedItem)
		    {
			    element.text = txttmp;
                sValue = valuetmp;
		    }
		    else
		    {
			    _setValue("");
		    }
	    }
	    
    }
}

function initCheckBox()
{
    try
    {
        var valuetmp  = getValue();
        if(oTreeDiv != null && oTreeDiv!= undefined)
        {
            for(var i= 0 ; i < valuetmp.split(',').length; i ++)
            {
                for(var j = 0; j < oTreeDiv.document.getElementsByTagName('NOBR').length; j ++)
                { 
                     if((oTreeDiv.document.getElementsByTagName('NOBR')[j].id  == valuetmp.split(',')[i]) && (oTreeDiv.document.getElementsByTagName('NOBR')[j].name == 'MYNOBR'))
                     {
                         getObj(oTreeDiv.document.getElementsByTagName('NOBR')[j],0).checked  = true;
                     }
                }
            }
        }
    }
    catch(e)
    {}
}

function clearCheckBox()
{
    try
    {
        if(oTreeDiv != null && oTreeDiv!= undefined)
        {
            for(var j = 0; j < oTreeDiv.document.getElementsByTagName('NOBR').length; j ++)
            { 
                 if((oTreeDiv.document.getElementsByTagName('NOBR')[j].name == 'MYNOBR'))
                 {
                     getObj(oTreeDiv.document.getElementsByTagName('NOBR')[j],0).checked  = false;
                 }
            }
        }
    }
    catch(e)
    {}
}

//(根据XSL解析出来的树结构)
//tag:0 MYCHK  1 MYNOBR
function getObj(obj,tag)
{
    var result = null; 
    var tmp  = "MYCHK";
    try
    {
        var parentObj = obj.parentElement;
        if(tag == 1)
        {
           tmp  = "MYNOBR";
        }
        for(var i = 0 ; i < parentObj.children.length; i ++)
        {
            if(parentObj.children[i].name == tmp)
            {
              result = parentObj.children[i];
            }
        }
    }
    catch(e){}
    return result; 
}

function changeoPopupWidth(showElement)
{
	if (showElement == null)
		return;
    var treeWidth = "";
    var tmp = "";
 
    for(var j = 0; j < oTreeDiv.getElementsByTagName('NOBR').length; j ++)
    {
        if(oTreeDiv.getElementsByTagName('NOBR')[j].style.display != "none")
        {
            if(j == 0)
            {
                tmp =  oTreeDiv.getElementsByTagName('NOBR')[j].offsetWidth;
                cLevel = 0; 
                getNodeSize(oTreeDiv.getElementsByTagName('NOBR')[j]);
            }
            else
            {
                if(tmp<oTreeDiv.getElementsByTagName('NOBR')[j].offsetWidth)
                {
                    tmp =   oTreeDiv.getElementsByTagName('NOBR')[j].offsetWidth;
                    cLevel = 0; 
                    getNodeSize(oTreeDiv.getElementsByTagName('NOBR')[j]);
                }
            }
        }
        
    }
    
   // var maxWidth =450;//最大距离
    var maxWidth=showElement.document.body.clientWidth-showElement.getBoundingClientRect().left;
    var minWidth=showElement.offsetWidth;
    if((tmp > minWidth) && (cLevel == 0))
    {
        treeWidth = tmp+70;
    }
    else
    {
        treeWidth = tmp+30*(cLevel)+70;
    }
    
    if(treeWidth <= minWidth)
    {
         treeWidth = minWidth;
    }
    if(treeWidth >= maxWidth)
    {
        treeWidth = maxWidth;
    }
    oPopup.show(0,showElement.offsetHeight,treeWidth,treeHeight,showElement);

	if(getIsCheckBox())
	{
        initCheckBox();
	}
}


var cLevel = 0; 
function getNodeSize(obj)
{
    try
    {
        if(obj.parentElement != null && obj.parentElement != undefined)
        {
             if(obj.parentElement.tagName == "TABLE")
            {
                cLevel ++;
                getNodeSize(obj.parentElement);
            }
            else
            {
                getNodeSize(obj.parentElement);
            }
        }

    }
    catch(e)
    {}
}

//------边框大小自动改变、复选框、返回父节点名称功能------end------------------

function parentNodeClick(oEvent)
{
	var oImg = oEvent.srcElement;
    var oItemDiv = getElement(oImg,"div");
    if(oItemDiv.type == 'parentNode')
    {
	    if(oImg.isShow=="true")
	    {
		    var oChildrenDiv = oItemDiv.nextSibling;
		    if(oChildrenDiv.style.display == "none")
	        {
	            oChildrenDiv.style.display = "";
	            changeImgSrc(oImg,0);
	        }
	        else
	        {
	            oChildrenDiv.style.display = "none";
	            changeImgSrc(oImg,1);
	        }
	    }
	    else if(oImg.isShow=="false")
	    {
	    	setXslAttribute('isParentLast',(oItemDiv.isLast=='true'),loadChildXslDoc);
			setXslAttribute('isParentOnlyNode',(oItemDiv.isOnlyNode=='true'),loadChildXslDoc);
	    	var oParentNode = xmlDom.selectSingleNode("//MenuItem[@id='"+oItemDiv.lastChild.id+"']");
        	var oChildXMLDoc = createShowXML(oParentNode.childNodes,true);
        	oItemDiv.insertAdjacentHTML("afterEnd",oChildXMLDoc.transformNode(loadChildXslDoc));
        	changeImgSrc(oImg,0);
        	oImg.isShow="true";
	    }
    }
    
    changeoPopupWidth(delement);
}

function isClosed(oItem)
{
	var oItemDiv = getElement(oItem,'div');
	return (oItemDiv.firstChild.imgType == 1);
}

function changeImgSrc(oItemImg,state)
{
    oItemImg.src = eval('oItemImg.src'+state);
    oItemImg.imgType = state;
}

function createShowXML(oAddNode,isAddChild)
{
	var showDoc = new ActiveXObject("Microsoft.XMLDOM");
	var root = showDoc.createElement("root");
	showDoc.appendChild(root);
	var errorNode = showDoc.createElement("error_code");
	errorNode.text = 0;
	root.appendChild(errorNode);
	var menuNode = showDoc.createElement("Menu");
	root.appendChild(menuNode);
	//添加子节点
	if(arguments.length == 2)
	{
		if(typeof oAddNode.length == "undefined")
		{
			//单一节点
			menuNode.appendChild(oAddNode.cloneNode(isAddChild));
		}
		else
		{
			//节点集合
			for(var i=0;i<oAddNode.length;i++)
			{
				menuNode.appendChild(oAddNode[i].cloneNode(isAddChild));
			}
		}
	}
	return showDoc;
}

function getRealPath(fileName)
{
	var re,result;
	var selfPath = document.URL.replace(/\\/g,'/');
	re = /.*\//;
	result = re.exec(selfPath);
	return result+fileName;
}

function setXslAttribute(name,value,oXslDoc)
{
    if(value!=null)
    {
        switch(value.constructor)
        {
            case String:
                value = "'"+value+"'";
                break;
            case Boolean:
                value = value+"()";
                break;
        }
        name = '/xsl:stylesheet/xsl:variable[@name="'+name+'"]';
        oXslDoc.selectSingleNode(name).setAttribute("select",value);
    }
}

function setXslAttributeArray(name,oXslDoc)
{
    for(var i=0;i<eval(name + ".length");i++)
    {
        setXslAttribute(name+i,eval("this." + name+"["+i+"]"),oXslDoc);
    }
}

function setBooleanAtt(value)
{
	return (typeof(value)=="boolean")?value:(value=="true");
}

function showWait()
{
	var waitDiv = oPopup.document.createElement('div');
    waitDiv.style.position = 'absolute';
    waitDiv.style.zIndex = 99;
    waitDiv.innerHTML = '<img src='+icoUrl +waitIco+' align="absmiddle"/>'
                      + '<span style="font:normal normal normal 9pt normal 宋体;vertical-align:bottom;margin-left:5px">'+waitText+'</span>';
    oTreeDiv.appendChild(waitDiv);
    waitDiv.style.left=(oTreeDiv.offsetWidth - waitDiv.offsetWidth)/2;
    waitDiv.style.top=(oTreeDiv.offsetHeight - waitDiv.offsetHeight)/2;
}

function cancel()
{
	return false;
}

function getPopWin() {
	return oPopup;
}

function checkChildNodes(chk)
{
	if(this.isSelectChildNode)
	{
		var chkId = getObj(chk,1).id
		checkChildById(chk,chkId,oXmlDom);
	}
}

function checkChildById(chk,chkId,oNodeXml)
{
	var chkNodeXpath = '//MenuItem[@id="' + chkId + '"]/MenuItem';
	var nodes = oNodeXml.selectNodes(chkNodeXpath);
	for(var j=0;j<nodes.length;j++)
	{
		var childNodeId = nodes[j].getAttribute("id");	
		var allchk = oTreeDiv.document.getElementsByName('MYCHK');
		for (var i = 0; i < allchk.length; i++) 
		{
			if (allchk[i].type == "checkbox" && getObj(allchk[i],1).id == childNodeId) 
		    {
		    	allchk[i].checked = chk.checked;
		    }
		}
		checkChildById(chk,childNodeId,nodes[j]);
	}
}

function setIsSelectChildNode(val)
{
	this.isSelectChildNode = val;
}

function getIsSelectChildNode()
{
	return isSelectChildNode;
}

function setIsShowUnDisplay(val)
{
	this.isShowUnDisplay = val;
}

function getIsShowUnDisplay()
{
	return this.isShowUnDisplay;
}

function setFilterParentXpath(val)
{
    this.strFilterParentXpath = val;
    //重置来恢复被删除的节点
    this.setXmlUrl(sXmlUrl);
}

</SCRIPT>
